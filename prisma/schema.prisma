generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum PageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum BannerStatus {
  ACTIVE
  INACTIVE
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String?
  surname       String?
  phone         String?
  password      String
  avatar        String?
  created_at    DateTime   @default(now())
  is_admin      Boolean    @default(false)
  is_item_owner Boolean    @default(false)
  items         Item[]     @relation("ItemOwner")
  bookmarks     Bookmark[]
  media_files   Media[]    @relation("UserMedia")
  custom_data   Json? // Stores dynamic custom fields
}

model Item {
  id             String         @id @default(cuid())
  title          String
  description    String
  price          Float
  address        String
  city           String
  district       String
  bedroom_count  Int
  bathroom_count Int
  garage_count   Int            @default(0)
  area           Float
  year_built     Int
  status         ItemStatus     @default(ACTIVE)
  item_category  ItemCategory[]
  for_sale       Boolean        @default(true)
  is_featured    Boolean        @default(false)
  latitude       Float
  longitude      Float
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  owner_id       String
  owner          User           @relation("ItemOwner", fields: [owner_id], references: [id])
  media          Media[]
  bookmarks      Bookmark[]
  custom_data    Json? // Stores dynamic custom fields
}

enum ItemStatus {
  ACTIVE
  INACTIVE
  SOLD
}

model ItemCategory {
  id         String   @id @default(cuid())
  name       String   @unique
  icon       String?
  items      Item[]
  media      Media[]
  created_at DateTime @default(now())
}

model Media {
  id           String         @id @default(cuid())
  name         String
  path         String
  user_id      String
  user         User           @relation("UserMedia", fields: [user_id], references: [id])
  created_at   DateTime       @default(now())
  banner       Banner[]
  item         Item[]
  itemCategory ItemCategory[]
}

model Bookmark {
  id         String   @id @default(cuid())
  user_id    String
  item_id    String
  user       User     @relation(fields: [user_id], references: [id])
  item       Item     @relation(fields: [item_id], references: [id])
  created_at DateTime @default(now())
}

model Menu {
  id         String   @id @default(cuid())
  title      String
  active     Boolean  @default(true)
  slug       String
  parent_id  String?
  parent     Menu?    @relation("ChildMenu", fields: [parent_id], references: [id])
  children   Menu[]   @relation("ChildMenu")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Page {
  id               String              @id @default(cuid())
  title            String
  slug             String              @unique
  description      String?
  status           PageStatus // Draft, Published, Archived, etc.
  created_at       DateTime            @default(now())
  updated_at       DateTime            @updatedAt
  meta_title       String?
  meta_description String?
  meta_keywords    String?
  page_sections    PageSectionOnPage[]
  custom_data      Json? // Stores dynamic custom fields
}

model Banner {
  id          String       @id @default(cuid())
  title       String
  status      BannerStatus // Draft, Published, Archived, etc.
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  media_id    String?
  media       Media?       @relation(fields: [media_id], references: [id])
  custom_data Json? // Stores dynamic custom fields
}

model PageSection {
  id             String              @id @default(cuid())
  title          String
  component_name String              @default("DefaultComponent")
  body           String?
  display_order  Int
  preview_image  String?
  created_at     DateTime            @default(now())
  updated_at     DateTime            @updatedAt
  pages          PageSectionOnPage[]
  custom_data    Json? // Stores dynamic custom fields
}

model PageSectionOnPage {
  id          String      @id @default(cuid())
  page_id     String
  page        Page        @relation(fields: [page_id], references: [id])
  section_id  String
  section     PageSection @relation(fields: [section_id], references: [id])
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  custom_data Json? // Stores dynamic custom fields
}

model Contact {
  id         String   @id @default(cuid())
  name       String
  email      String
  phone      String
  message    String
  created_at DateTime @default(now())
}

model Setting {
  id                        String   @id @default(cuid())
  business_name             String
  business_logo             String
  business_email            String
  business_phone            String
  business_address          String
  business_description      String
  business_meta_title       String
  business_meta_description String
  business_meta_keywords    String
  business_facebook         String?
  business_twitter          String?
  business_instagram        String?
  business_linkedin         String?
  business_youtube          String?
  business_whatsapp         String?
  business_pinterest        String?
  business_tiktok           String?
  business_snapchat         String?
  business_github           String?
  business_google           String?
  location_latitude         Float?
  location_longitude        Float?
  location_zoom             Int?
  currency                  String   @default("USD")
  currency_symbol           String   @default("$")
  timezone                  String   @default("UTC")
  allow_agent_registration  Boolean  @default(true)
  updated_at                DateTime @updatedAt
  custom_data               Json? // Stores dynamic custom fields
}

model City {
  id        String     @id @default(cuid())
  name      String
  districts District[]
}

model District {
  id      String @id @default(cuid())
  name    String
  city_id String
  city    City   @relation(fields: [city_id], references: [id])
}
